name: CI Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run linting (optional)
      run: |
        # Install additional linting tools if needed
        pip install flake8 black isort
        # Run linting checks
        echo "Linting checks would go here"
        
    - name: Run tests with pytest
      run: |
        pytest -v --tb=short --cov=utils --cov=main --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Test Docker build
      run: |
        docker build -t drone-deploy-email-generator .
        
    - name: Test Docker run (without API key)
      run: |
        # Test that the container starts and handles missing API key gracefully
        timeout 30s docker run --rm -e GOOGLE_API_KEY=invalid_key drone-deploy-email-generator || true
        
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        pip install safety bandit
        safety check --json
        bandit -r . -f json || true
        
  build-status:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always()
    steps:
    - name: Build Status
      run: |
        echo "âœ… All CI checks completed"
        echo "ðŸ“Š Test Results: ${{ needs.test.result }}"
        echo "ðŸ”’ Security Results: ${{ needs.security.result }}"
